

name: Admin Build & Deploy

on:
  push:
    branches: [ "dev", "main" ]
  pull_request:
    branches: [ "dev", "main" ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      REGISTRY: docker.io
      IMAGE_NAME: candlelms2.0-admin
      DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
      DOCKER_HUB_PASSWORD: ${{ secrets.DOCKER_HUB_PASSWORD }}
      SERVER_SSH_KEY: ${{ secrets.SERVER_SSH_KEY }}
      SERVER_IP: ${{ secrets.SERVER_IP }}
      SSH_USER: ${{ secrets.SSH_USER }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set git_sha
        run: |
          BRANCH="${{ github.ref_name }}"
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            BRANCH="${{ github.base_ref }}"
          fi
          
          if [[ "$BRANCH" == "main" ]]; then
            echo "git_sha=main-$(echo $GITHUB_SHA | cut -c1-7)" >> $GITHUB_ENV
          elif [[ "$BRANCH" == "dev" ]]; then
            echo "git_sha=dev-$(echo $GITHUB_SHA | cut -c1-7)" >> $GITHUB_ENV
          else
            echo "Unsupported branch: $BRANCH"
            exit 1
          fi  
          
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKER_HUB_USERNAME }}
          password: ${{ env.DOCKER_HUB_PASSWORD }}

      - name: Set NEXT_PUBLIC_API_URL per environment
        run: |
          if [[ "${{ github.ref_name }}" == "main" ]]; then
            echo "NEXT_PUBLIC_API_URL=${{ secrets.PROD_NEXT_PUBLIC_API_URL }}" >> $GITHUB_ENV
          else
            echo "NEXT_PUBLIC_API_URL=${{ secrets.DEV_NEXT_PUBLIC_API_URL }}" >> $GITHUB_ENV
          fi  

      - name: Build and Push Admin Image
        run: |
          echo "Building with NEXT_PUBLIC_API_URL=${{ env.NEXT_PUBLIC_API_URL }}"
          docker build \
            --build-arg NEXT_PUBLIC_API_URL=${{ env.NEXT_PUBLIC_API_URL }} \
            -t $REGISTRY/$DOCKER_HUB_USERNAME/${IMAGE_NAME}:${{ env.git_sha }} .
          docker push $REGISTRY/$DOCKER_HUB_USERNAME/${IMAGE_NAME}:${{ env.git_sha }}

          
      - name: Wait and Verify Image on Docker Hub
        run: |
          echo "Waiting for Docker Hub image to be fully available..."
          sleep 15
          
          IMAGE=$REGISTRY/$DOCKER_HUB_USERNAME/${IMAGE_NAME}:${{ env.git_sha }}
          echo "Pulling image: $IMAGE"
          docker pull $IMAGE
          echo "Verifying image manifest..."
          for i in {1..5}; do
            docker inspect $IMAGE > /dev/null && break
            echo "Waiting for Docker manifest to be ready ($i)..."
            sleep 10
          done

          if ! docker inspect $IMAGE > /dev/null; then
            echo " Image manifest not ready after multiple attempts. Aborting."
            exit 1
          fi  

      - name: Show Docker Image Info
        run: |
          echo "======================"
          echo "✅ Docker image built and pushed"
          echo "📦 Full Image: $REGISTRY/$DOCKER_HUB_USERNAME/$IMAGE_NAME"
          echo "🏷️  Tag: ${{ env.git_sha }}"
          echo "======================"

      - name: Install SSH Key (Only for dev)
        if: github.ref_name == 'dev'
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ env.SERVER_SSH_KEY }}
          known_hosts: unnecessary

      - name: Add Host to known_hosts
        if: github.ref_name == 'dev'
        run: ssh-keyscan -p 22 -H ${{ env.SERVER_IP }} >> ~/.ssh/known_hosts

      - name: SSH and Deploy Admin to Dev Server
        if: github.ref_name == 'dev'
        run: |
          echo "${SERVER_SSH_KEY}" > key.pem && chmod 600 key.pem
          IMAGE=$REGISTRY/$DOCKER_HUB_USERNAME/$IMAGE_NAME
          ssh -i key.pem -o StrictHostKeyChecking=no $SSH_USER@$SERVER_IP \
            "/home/azureuser/deploy.sh admin ${{ env.git_sha }} $IMAGE"

      - name: Clean up SSH Key
        if: github.ref_name == 'dev'
        run: rm -f key.pem

      - name: Output SHA for PRs
        if: github.event_name == 'pull_request'
        run: echo "Pull request received for Admin changes. No deploy triggered."
